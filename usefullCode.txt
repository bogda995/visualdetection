import React from "react";
import { ToastContainer, toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import Navigation from "./components/Navigation/Navigation";
import Logo from "./components/Logo/Logo";
import ImageLinkForm from "./components/ImageLinkForm/ImageLinkForm";
import Rank from "./components/Rank/Rank";
import FaceRecognition from "./components/FaceRecognition/FaceRecognition";
import "./App.css";
import ParticlesBg from "particles-bg";
import axios from "./api"; // Import the axios instance
import { ThreeDots } from "react-loader-spinner";

class App extends React.Component {
  constructor() {
    super();
    this.state = {
      input: "",
      imageUrl: "",
      box: {}, // Initialize the box state
      isLoading: false,
    };
  }

  calculateFaceLocation = (data) => {
    const faceData = data.faces[0]; // Make sure this matches the response structure
    if (faceData) {
      const { top_row, left_col, bottom_row, right_col } = faceData;
      const image = document.getElementById('inputimage');
  
      // Check if the image element exists
      if (image) {
        const width = Number(image.width);
        const height = Number(image.height);
        return {
          leftCol: left_col * width,
          topRow: top_row * height,
          rightCol: width - (right_col * width),
          bottomRow: height - (bottom_row * height),
        };
      } else {
        console.warn("Image element not found.");
        return {};
      }
    } else {
      console.warn("No face detected in the image.");
      toast.warn("No face detected in the image. Please try another photo.", {
        position: "top-right",
        autoClose: 5000,
      });
      return {};
    }
  };
  

  displayFaceBox = (box) => {
    this.setState({ box });
  };

  onInputChange = (event) => {
    this.setState({ input: event.target.value });
  };

  onButtonSubmit = () => {
    const imageUrl = this.state.input;
    if (!imageUrl) {
      toast.warn("Please provide a valid image URL.", {
        position: "top-right",
        autoClose: 5000,
      });
      return;
    }

    this.setState({ imageUrl, isLoading: true }); // Set isLoading to true

    axios
      .post("/detect/", { image_url: imageUrl })
      .then((response) => {
        console.log("API Response:", response.data);
        this.setState({ isLoading: false }); // Set isLoading to false
        if (response.data.error) {
          console.error("Error:", response.data.error);
          toast.warn(response.data.error, {
            position: "top-right",
            autoClose: 5000,
          });
        } else if (response.data.faces && response.data.faces.length === 0) {
          toast.warn("No face detected in the image.", {
            position: "top-right",
            autoClose: 5000,
          });
        } else {
          this.displayFaceBox(this.calculateFaceLocation(response.data));
        }
      })
      .catch((error) => {
        this.setState({ isLoading: false }); // Set isLoading to false
        toast.error("Error detecting face.", {
          position: "top-center",
          autoClose: 3000,
        });
        console.error("Error:", error);
      });
  };

  // ONBUTTONSUBMIT WITHOUT LOADING
  // onButtonSubmit = () => {
  //   const imageUrl = this.state.input;
  //   if (!imageUrl) {
  //     toast.warn("Please provide a valid image URL.", {
  //       position: "top-right",
  //       autoClose: 5000,
  //     });
  //     return;
  //   }

  //   this.setState({ imageUrl: imageUrl });

  //   axios.post('/detect/', { image_url: imageUrl })
  //     .then(response => {
  //       console.log("API Response:", response.data);
  //       if (response.data.error) {
  //         console.error("Error:", response.data.error);
  //         toast.warn(response.data.error, {
  //           position: "top-right",
  //           autoClose: 5000,
  //         });
  //       } else if (response.data.faces && response.data.faces.length === 0) {
  //         toast.warn("No face detected in the image.", {
  //           position: "top-right",
  //           autoClose: 5000,
  //         });
  //       } else {
  //         this.displayFaceBox(this.calculateFaceLocation(response.data));
  //       }
  //     })
  //     .catch(error => {
  //       toast.error("Error detecting face.", {
  //         position: "top-center",
  //         autoClose: 3000,
  //       });
  //       console.error("Error:", error);
  //     });
  // };

  // OLD AND GOOD VERSION OF BUTTON SUBMIT BEFORE DJANGO
  // onButtonSubmit = () => {
  //   this.setState({ imageUrl: this.state.input });

  //   const PAT = 'c37b5e56b4d446f48071c891d8c33900';
  //   const USER_ID = 'clarifai';
  //   const APP_ID = 'main';
  //   const MODEL_ID = 'face-detection';
  //   const MODEL_VERSION_ID = '6dc7e46bc9124c5c8824be4822abe105';

  //   const raw = JSON.stringify({
  //     "user_app_id": {
  //       "user_id": USER_ID,
  //       "app_id": APP_ID
  //     },
  //     "inputs": [
  //       {
  //         "data": {
  //           "image": {
  //             "url": this.state.input
  //           }
  //         }
  //       }
  //     ]
  //   });

  //   const requestOptions = {
  //     method: 'POST',
  //     headers: {
  //       'Accept': 'application/json',
  //       'Authorization': 'Key ' + PAT
  //     },
  //     body: raw
  //   };

  //   fetch(`https://api.clarifai.com/v2/models/${MODEL_ID}/versions/${MODEL_VERSION_ID}/outputs`, requestOptions)
  //     .then(response => response.json())
  //     .then(result => {
  //       console.log('API Response:', result);
  //       this.displayFaceBox(this.calculateFaceLocation(result));
  //     })
  //     .catch(error => console.log('Error:', error));
  // };

  render() {
    return (
      <div className="App">
        <ParticlesBg num={10} type="circle" bg={true} />
        <Navigation />
        <Logo />
        <Rank />
        <ImageLinkForm
          onInputChange={this.onInputChange}
          onButtonSubmit={this.onButtonSubmit}
        />
        {this.state.isLoading ? (
          <ThreeDots color="#00BFFF" height={80} width={80} />
        ) : (
          <FaceRecognition
            box={this.state.box}
            imageUrl={this.state.imageUrl}
          />
        )}
        <ToastContainer />
      </div>
    );
  }
}

export default App;


Python
# face_detection/views.py
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import status
from clarifai.client.model import Model
from django.http import HttpResponse

class FaceDetectionView(APIView):
    def post(self, request):
        PAT = 'c37b5e56b4d446f48071c891d8c33900'
        MODEL_ID = 'face-detection'
        IMAGE_URL = request.data.get('image_url')

        if not IMAGE_URL:
            return Response({"error": "No image URL provided."}, status=status.HTTP_400_BAD_REQUEST)

        model_url = f"https://clarifai.com/clarifai/main/models/{MODEL_ID}"
        detector_model = Model(
            url=model_url,
            pat=PAT,
        )

        try:
            prediction_response = detector_model.predict_by_url(
                IMAGE_URL, input_type="image"
            )
            
            # Log the raw response for debugging
            print("Prediction Response:", prediction_response)

            if not prediction_response.outputs:
                return Response({"error": "No outputs from Clarifai API."}, status=status.HTTP_400_BAD_REQUEST)

            regions = prediction_response.outputs[0].data.regions
            if not regions:
                return Response({"faces": [], "message": "No face detected."}, status=status.HTTP_200_OK)

            result = []
            for region in regions:
                bounding_box = region.region_info.bounding_box
                top_row = round(bounding_box.top_row, 3)
                left_col = round(bounding_box.left_col, 3)
                bottom_row = round(bounding_box.bottom_row, 3)
                right_col = round(bounding_box.right_col, 3)
                result.append({
                    "top_row": top_row,
                    "left_col": left_col,
                    "bottom_row": bottom_row,
                    "right_col": right_col
                })

            return Response({"faces": result}, status=status.HTTP_200_OK)
        
        except Exception as e:
            # Log the error
            print("Error during face detection:", str(e))
            return Response({"error": str(e)}, status=status.HTTP_400_BAD_REQUEST)


# OLD VERSION
# class FaceDetectionView(APIView):
#     def post(self, request):
#         PAT = 'c37b5e56b4d446f48071c891d8c33900'
#         MODEL_ID = 'face-detection'
#         IMAGE_URL = request.data.get('image_url')

#         model_url = f"https://clarifai.com/clarifai/main/models/{MODEL_ID}"
#         detector_model = Model(
#             url=model_url,
#             pat=PAT,
#         )

#         try:
#             prediction_response = detector_model.predict_by_url(
#                 IMAGE_URL, input_type="image"
#             )

#             regions = prediction_response.outputs[0].data.regions
#             result = []
#             for region in regions:
#                 bounding_box = region.region_info.bounding_box
#                 top_row = round(bounding_box.top_row, 3)
#                 left_col = round(bounding_box.left_col, 3)
#                 bottom_row = round(bounding_box.bottom_row, 3)
#                 right_col = round(bounding_box.right_col, 3)
#                 result.append({
#                     "top_row": top_row,
#                     "left_col": left_col,
#                     "bottom_row": bottom_row,
#                     "right_col": right_col
#                 })

#             return Response({"faces": result}, status=status.HTTP_200_OK)
        
#         except Exception as e:
#             return Response({"error": str(e)}, status=status.HTTP_400_BAD_REQUEST)

# This should be a standalone function, not a method
def index(request):
    return HttpResponse("Hello, this is the Face Detection API.")

